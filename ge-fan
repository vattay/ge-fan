#!/bin/bash

TICK=1
NDISP=''

if [ -z ${DISPLAY+x} ]; then
    NDISP=':0'
else 
    NDISP=$DISPLAY
fi

echo "Using DISPLAY $DISPLAY"

lockdir=/tmp/ge-fan.lock

devices=$(nvidia-smi -L | awk '{print $2}' | sed 's/.$//' | tr '\n' ' ')

trap ctrl_c INT
trap term TERM

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

IFS=$'\r\n' GLOBIGNORE='*' command eval  'CURVE=($(cat $DIR/curve.txt))'

ctrl_c(){
  echo "Interrupted..." 
  finish
  exit 0
}

term(){
  echo "Terminating..."
  finish
  exit 0
}

constrain(){
  local result=$1
  if [ "$1" -gt 100 ]
  then
    result=100
  elif [ "$1" -lt 0 ]
  then
    result="0"
  fi
  echo "$result"
}

init(){
  if mkdir "$lockdir"
  then 
    trap 'rm -rf "$lockdir"' 0
  else
    exit 0
  fi  
  for i in $devices;
  do
    nvidia-settings -c $NDISP -a "[gpu:$i]/GPUFanControlState=1" -t > /dev/null
  done
}

finish(){
  for i in $devices;
  do
    nvidia-settings -c $NDISP -a "[fan:$i]/GPUTargetFanSpeed=0" -t > /dev/null
    nvidia-settings -c $NDISP -a "[gpu:$i]/GPUFanControlState=0" -t > /dev/null
  done
}

adjust_fan(){
  gpu_id=$1
  temp=$2

  new_fan="$((${CURVE[$temp]}))"
  new_fan=$(constrain $new_fan)
  echo "Temp: $temp Fan: $new_fan"
  nvidia-settings -c $NDISP -a "[fan:$gpu_id]/GPUTargetFanSpeed=$new_fan" > /dev/null
}

sample(){
for i in $devices;
do
  temp=$(nvidia-settings -c $NDISP -q "[gpu:$i]/GPUCoreTemp" -t)
  adjust_fan $i $temp
done
}

init;
while true
do 
  sample;
  sleep $TICK
done


